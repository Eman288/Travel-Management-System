// <auto-generated />
using System;
using MVCPro.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MVCPro.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MVCPro.Models.Bus", b =>
                {
                    b.Property<int>("BusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusID"), 1L, 1);

                    b.Property<int>("NumberOfSeats")
                        .HasColumnType("int");

                    b.HasKey("BusID");

                    b.ToTable("buses");
                });

            modelBuilder.Entity("MVCPro.Models.Staff", b =>
                {
                    b.Property<string>("NationalId")
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ImageUser")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffCode")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("NationalId");

                    b.ToTable("staff");
                });

            modelBuilder.Entity("MVCPro.Models.TouristAttraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("tourists");
                });

            modelBuilder.Entity("MVCPro.Models.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TripId"), 1L, 1);

                    b.Property<int>("BusID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromLocation")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ImageUser")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("StaffNationalId")
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("staff")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TripId");

                    b.HasIndex("BusID");

                    b.HasIndex("StaffNationalId");

                    b.ToTable("trips");
                });

            modelBuilder.Entity("MVCPro.Models.TripAtt", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("TouristAttractionId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("TripId", "TouristAttractionId", "Order");

                    b.HasIndex("TouristAttractionId");

                    b.ToTable("tripatt");
                });

            modelBuilder.Entity("MVCPro.Models.User", b =>
                {
                    b.Property<string>("NationalId")
                        .HasMaxLength(14)
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ImageUser")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Job")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.HasKey("NationalId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MVCPro.Models.UserTrip", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(14)");

                    b.Property<DateTime>("BookDate")
                        .HasColumnType("datetime2");

                    b.HasKey("TripId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("usertrips");
                });

            modelBuilder.Entity("MVCPro.Models.Trip", b =>
                {
                    b.HasOne("MVCPro.Models.Bus", "Bus")
                        .WithMany("Trip")
                        .HasForeignKey("BusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCPro.Models.Staff", "Staff")
                        .WithMany("Trip")
                        .HasForeignKey("StaffNationalId");

                    b.Navigation("Bus");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("MVCPro.Models.TripAtt", b =>
                {
                    b.HasOne("MVCPro.Models.TouristAttraction", "TouristAttraction")
                        .WithMany("TripAtt")
                        .HasForeignKey("TouristAttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCPro.Models.Trip", "Trip")
                        .WithMany("TripAtt")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TouristAttraction");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MVCPro.Models.UserTrip", b =>
                {
                    b.HasOne("MVCPro.Models.Trip", "Trip")
                        .WithMany("UserTrips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVCPro.Models.User", "User")
                        .WithMany("UserTrips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVCPro.Models.Bus", b =>
                {
                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MVCPro.Models.Staff", b =>
                {
                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MVCPro.Models.TouristAttraction", b =>
                {
                    b.Navigation("TripAtt");
                });

            modelBuilder.Entity("MVCPro.Models.Trip", b =>
                {
                    b.Navigation("TripAtt");

                    b.Navigation("UserTrips");
                });

            modelBuilder.Entity("MVCPro.Models.User", b =>
                {
                    b.Navigation("UserTrips");
                });
#pragma warning restore 612, 618
        }
    }
}
